/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_ERC20" {
    code {
        codecopy(0, dataoffset("A2_ERC20_deployed"), datasize("A2_ERC20_deployed"))
        return(0, datasize("A2_ERC20_deployed"))
    }
    object "A2_ERC20_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xdd62ed3e
                {
                    // allowance(address,address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_address$_$address_address$(4, calldatasize())
                    let ret_0 := A2_ERC20_allowance(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x095ea7b3
                {
                    // approve(address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_uint256$_$address_A2_U256_U256$(4, calldatasize())
                    let ret_0 := A2_ERC20_approve(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x70a08231
                {
                    // balanceOf(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$_$address$(4, calldatasize())
                    let ret_0 := A2_ERC20_balance_of(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x18160ddd
                {
                    // totalSupply()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_ERC20_total_supply()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xa9059cbb
                {
                    // transfer(address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_uint256$_$address_A2_U256_U256$(4, calldatasize())
                    let ret_0 := A2_ERC20_transfer(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x23b872dd
                {
                    // transferFrom(address,address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2 := abi_decode_tuple_$address_address_uint256$_$address_address_A2_U256_U256$(4, calldatasize())
                    let ret_0 := A2_ERC20_transfer_from(param_0, param_1, param_2)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_ERC20_allowance(_owner, _spender) -> $result {
                let $t2
                // $t2 := 0
                $t2 := 0
                // return $t2
                $result := $t2
            }

            function A2_ERC20_approve(_spender, _amount) -> $result {
                let $t2
                // $t2 := true
                $t2 := true
                // return $t2
                $result := $t2
            }

            function A2_ERC20_balance_of(_owner) -> $result {
                let $t1
                // $t1 := 0
                $t1 := 0
                // return $t1
                $result := $t1
            }

            function A2_ERC20_total_supply() -> $result {
                let $t0
                // $t0 := 0
                $t0 := 0
                // return $t0
                $result := $t0
            }

            function A2_ERC20_transfer(_to, _amount) -> $result {
                let $t2
                // $t2 := true
                $t2 := true
                // return $t2
                $result := $t2
            }

            function A2_ERC20_transfer_from(_from, _to, _amount) -> $result {
                let $t3
                // $t3 := true
                $t3 := true
                // return $t3
                $result := $t3
            }

            function abi_encode_tuple_$bool$_$bool$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_bool(value_0, add(headStart, 0))
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_decode_tuple_$address_address_uint256$_$address_address_A2_U256_U256$(headStart, dataEnd) -> value_0, value_1, value_2 {
                if slt(sub(dataEnd, headStart), 96) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value_2 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_uint256(value)
            }
            function validator_uint256(value) {
                if iszero(eq(value, cleanup_uint256(value))) { $Abort(95) }
            }
            function cleanup_uint256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$address_uint256$_$address_A2_U256_U256$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$uint256$_$A2_U256_U256$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint256(value_0, add(headStart, 0))
            }
            function abi_encode_uint256(value, pos) {
                mstore(pos, cleanup_uint256(value))
            }
            function abi_decode_tuple_$address$_$address$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_tuple_$address_address$_$address_address$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul
