//# publish

// This file contains tests checking that type arguments used in phantom position
// (phantom arguments) are not considered when deriving the abilities for a struct.

module 0x1.M1 {
    struct NoAbilities { a: bool }
}

//# publish
module 0x1.M2 {
    import 0x1.M1;

    struct HasDrop<phantom T1, T2> has drop { a: bool }

    // `WriteRef` requires drop
    f(ref: &mut Self.HasDrop<M1.NoAbilities, M1.NoAbilities>) {
    label b0:
        *move(ref) = HasDrop<M1.NoAbilities, M1.NoAbilities> { a : true };
        return;
    }
}

//# publish
module 0x1.M3 {
    import 0x1.M1;

    struct HasDrop<phantom T1, T2> has drop { a: bool }

    // `Pop` requires drop
    f() {
    label b0:
        _ = HasDrop<M1.NoAbilities, M1.NoAbilities> { a: true };
        return;
    }
 }

//# publish
 module 0x1.M4 {
    import 0x1.M1;

    struct HasDrop<phantom T1, T2> has drop { a: bool }

    // Leaving value in local requires drop
    f(x: Self.HasDrop<M1.NoAbilities, M1.NoAbilities>) {
    label b0:
        return;
    }
 }

//# publish
 module 0x1.M5 {
    import 0x1.M1;
    struct HasCopy<phantom T1, T2> has copy { a : bool }

    // `CopyLoc` requires copy
    f(x: Self.HasCopy<M1.NoAbilities, M1.NoAbilities>): Self.HasCopy<M1.NoAbilities, M1.NoAbilities> * Self.HasCopy<M1.NoAbilities, M1.NoAbilities> {
    label b0:
        return (copy(x), move(x));
    }
 }

//# publish
 module 0x1.M6 {
    import 0x1.M1;

    struct HasKey<phantom T1, T2> has key { a : bool }

    // `MoveTo` requires key
    f(s: &signer, x: Self.HasKey<M1.NoAbilities, M1.NoAbilities>) {
    label b0:
        move_to<HasKey<M1.NoAbilities, M1.NoAbilities>>(move(s), move(x));
        return;
    }

 }

//# publish
 module 0x1.M7 {
    import 0x1.M1;

    struct HasKey<phantom T1, T2> has key { a : bool }

    // `MoveFrom` requires key
    f(): Self.HasKey<M1.NoAbilities, M1.NoAbilities> acquires HasKey {
    label b0:
        return move_from<HasKey<M1.NoAbilities, M1.NoAbilities>>(0x0);
    }
 }

//# publish
 module 0x1.M8 {
    import 0x1.M1;

    struct HasKey<phantom T1, T2> has key { a : bool }

    // `Exists` requires key
    f(): bool {
    label b0:
        return exists<HasKey<M1.NoAbilities, M1.NoAbilities>>(0x0);
    }
}

//# publish
module 0x1.M9 {
    import 0x1.M1;

    struct HasStore<phantom T1, T2> has store { a: bool }
    struct RequireStore<T: store> { a: bool }

    f(): Self.RequireStore<Self.HasStore<M1.NoAbilities, M1.NoAbilities>> {
    label b0:
        return RequireStore<Self.HasStore<M1.NoAbilities, M1.NoAbilities>> { a: true };
    }
}
